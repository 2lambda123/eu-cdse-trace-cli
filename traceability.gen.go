// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package main

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for TraceEvent.
const (
	COPY   TraceEvent = "COPY"
	CREATE TraceEvent = "CREATE"
	DELETE TraceEvent = "DELETE"
)

// Content A product's content contains the path and the filehash
type Content struct {
	Hash string `json:"hash"`
	Path string `json:"path"`
}

// HTTPValidationError defines model for HTTPValidationError.
type HTTPValidationError struct {
	Detail *[]ValidationError `json:"detail,omitempty"`
}

// Input The input product used to derive a product from.
type Input struct {
	Hash        string `json:"hash"`
	ProductName string `json:"product_name"`
}

// Product A product is either a file itself, or a collection of files.
type Product struct {
	Contents *[]Content `json:"contents,omitempty"`
	Hash     string     `json:"hash"`
	Inputs   *[]Input   `json:"inputs,omitempty"`
	Name     string     `json:"name"`
	Size     int        `json:"size"`
}

// Signature The trace signature can be used to verify a products integrity.
//
// The signature is created using an asymetric, public-key encryption system.
// The bytes being signed corespond to the trace's product dictionary, in lower-case,
// compact JSON format (i.e. without whitespaces or linebreaks) and encoded in utf-8.
type Signature struct {
	Algorithm string `json:"algorithm"`
	PublicKey string `json:"public_key"`
	Signature string `json:"signature"`
}

// Trace A trace describes a specific event for a product at a specific origin.
type Trace struct {
	Event         TraceEvent `json:"event"`
	HashAlgorithm string     `json:"hash_algorithm"`
	Origin        string     `json:"origin"`
	Product       Product    `json:"product"`
	Signature     Signature  `json:"signature"`
	Timestamp     time.Time  `json:"timestamp"`
}

// TraceEvent A trace event describes how the trace comes into life.
//
// CREATE: A new product is generated.
// COPY: A product is copied from to a new location.
// DELETE: A product is removed from for a given reason.
type TraceEvent string

// TraceRegistration The results of a trace registration.
type TraceRegistration struct {
	Message string `json:"message"`
	Success bool   `json:"success"`
}

// TraceValidation The results of a trace validation
type TraceValidation struct {
	Message string `json:"message"`
	Success bool   `json:"success"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Loc  []ValidationError_Loc_Item `json:"loc"`
	Msg  string                     `json:"msg"`
	Type string                     `json:"type"`
}

// ValidationErrorLoc0 defines model for .
type ValidationErrorLoc0 = string

// ValidationErrorLoc1 defines model for .
type ValidationErrorLoc1 = int

// ValidationError_Loc_Item defines model for ValidationError.loc.Item.
type ValidationError_Loc_Item struct {
	union json.RawMessage
}

// PutTracesV1JSONBody defines parameters for PutTracesV1.
type PutTracesV1JSONBody = []Trace

// SearchHashV1Params defines parameters for SearchHashV1.
type SearchHashV1Params struct {
	Filehash string `form:"filehash" json:"filehash"`
}

// ValidateProductParams defines parameters for ValidateProduct.
type ValidateProductParams struct {
	Filehash string `form:"filehash" json:"filehash"`
}

// PutTracesV1JSONRequestBody defines body for PutTracesV1 for application/json ContentType.
type PutTracesV1JSONRequestBody = PutTracesV1JSONBody

// AsValidationErrorLoc0 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc0
func (t ValidationError_Loc_Item) AsValidationErrorLoc0() (ValidationErrorLoc0, error) {
	var body ValidationErrorLoc0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc0 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) FromValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc0 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsValidationErrorLoc1 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc1
func (t ValidationError_Loc_Item) AsValidationErrorLoc1() (ValidationErrorLoc1, error) {
	var body ValidationErrorLoc1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc1 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) FromValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc1 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ValidationError_Loc_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationError_Loc_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PingStatusGet request
	PingStatusGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTracesV1 request with any body
	PutTracesV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTracesV1(ctx context.Context, body PutTracesV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchHashV1 request
	SearchHashV1(ctx context.Context, hash string, params *SearchHashV1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTraceV1 request
	GetTraceV1(ctx context.Context, productname string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateProduct request
	ValidateProduct(ctx context.Context, productname string, params *ValidateProductParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PingStatusGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPingStatusGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTracesV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTracesV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTracesV1(ctx context.Context, body PutTracesV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTracesV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchHashV1(ctx context.Context, hash string, params *SearchHashV1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchHashV1Request(c.Server, hash, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTraceV1(ctx context.Context, productname string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTraceV1Request(c.Server, productname)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateProduct(ctx context.Context, productname string, params *ValidateProductParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateProductRequest(c.Server, productname, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPingStatusGetRequest generates requests for PingStatusGet
func NewPingStatusGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTracesV1Request calls the generic PutTracesV1 builder with application/json body
func NewPutTracesV1Request(server string, body PutTracesV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTracesV1RequestWithBody(server, "application/json", bodyReader)
}

// NewPutTracesV1RequestWithBody generates requests for PutTracesV1 with any type of body
func NewPutTracesV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/traces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchHashV1Request generates requests for SearchHashV1
func NewSearchHashV1Request(server string, hash string, params *SearchHashV1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hash", runtime.ParamLocationPath, hash)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/traces/hash/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filehash", runtime.ParamLocationQuery, params.Filehash); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTraceV1Request generates requests for GetTraceV1
func NewGetTraceV1Request(server string, productname string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "productname", runtime.ParamLocationPath, productname)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/traces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewValidateProductRequest generates requests for ValidateProduct
func NewValidateProductRequest(server string, productname string, params *ValidateProductParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "productname", runtime.ParamLocationPath, productname)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/traces/%s/validate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filehash", runtime.ParamLocationQuery, params.Filehash); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PingStatusGet request
	PingStatusGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PingStatusGetResponse, error)

	// PutTracesV1 request with any body
	PutTracesV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTracesV1Response, error)

	PutTracesV1WithResponse(ctx context.Context, body PutTracesV1JSONRequestBody, reqEditors ...RequestEditorFn) (*PutTracesV1Response, error)

	// SearchHashV1 request
	SearchHashV1WithResponse(ctx context.Context, hash string, params *SearchHashV1Params, reqEditors ...RequestEditorFn) (*SearchHashV1Response, error)

	// GetTraceV1 request
	GetTraceV1WithResponse(ctx context.Context, productname string, reqEditors ...RequestEditorFn) (*GetTraceV1Response, error)

	// ValidateProduct request
	ValidateProductWithResponse(ctx context.Context, productname string, params *ValidateProductParams, reqEditors ...RequestEditorFn) (*ValidateProductResponse, error)
}

type PingStatusGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r PingStatusGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PingStatusGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTracesV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TraceRegistration
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r PutTracesV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTracesV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchHashV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Trace
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r SearchHashV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchHashV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTraceV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Trace
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetTraceV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTraceV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TraceValidation
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ValidateProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PingStatusGetWithResponse request returning *PingStatusGetResponse
func (c *ClientWithResponses) PingStatusGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PingStatusGetResponse, error) {
	rsp, err := c.PingStatusGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePingStatusGetResponse(rsp)
}

// PutTracesV1WithBodyWithResponse request with arbitrary body returning *PutTracesV1Response
func (c *ClientWithResponses) PutTracesV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTracesV1Response, error) {
	rsp, err := c.PutTracesV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTracesV1Response(rsp)
}

func (c *ClientWithResponses) PutTracesV1WithResponse(ctx context.Context, body PutTracesV1JSONRequestBody, reqEditors ...RequestEditorFn) (*PutTracesV1Response, error) {
	rsp, err := c.PutTracesV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTracesV1Response(rsp)
}

// SearchHashV1WithResponse request returning *SearchHashV1Response
func (c *ClientWithResponses) SearchHashV1WithResponse(ctx context.Context, hash string, params *SearchHashV1Params, reqEditors ...RequestEditorFn) (*SearchHashV1Response, error) {
	rsp, err := c.SearchHashV1(ctx, hash, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchHashV1Response(rsp)
}

// GetTraceV1WithResponse request returning *GetTraceV1Response
func (c *ClientWithResponses) GetTraceV1WithResponse(ctx context.Context, productname string, reqEditors ...RequestEditorFn) (*GetTraceV1Response, error) {
	rsp, err := c.GetTraceV1(ctx, productname, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTraceV1Response(rsp)
}

// ValidateProductWithResponse request returning *ValidateProductResponse
func (c *ClientWithResponses) ValidateProductWithResponse(ctx context.Context, productname string, params *ValidateProductParams, reqEditors ...RequestEditorFn) (*ValidateProductResponse, error) {
	rsp, err := c.ValidateProduct(ctx, productname, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateProductResponse(rsp)
}

// ParsePingStatusGetResponse parses an HTTP response from a PingStatusGetWithResponse call
func ParsePingStatusGetResponse(rsp *http.Response) (*PingStatusGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PingStatusGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutTracesV1Response parses an HTTP response from a PutTracesV1WithResponse call
func ParsePutTracesV1Response(rsp *http.Response) (*PutTracesV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTracesV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TraceRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseSearchHashV1Response parses an HTTP response from a SearchHashV1WithResponse call
func ParseSearchHashV1Response(rsp *http.Response) (*SearchHashV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchHashV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Trace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetTraceV1Response parses an HTTP response from a GetTraceV1WithResponse call
func ParseGetTraceV1Response(rsp *http.Response) (*GetTraceV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTraceV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Trace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseValidateProductResponse parses an HTTP response from a ValidateProductWithResponse call
func ParseValidateProductResponse(rsp *http.Response) (*ValidateProductResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TraceValidation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
