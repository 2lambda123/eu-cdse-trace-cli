// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package main

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for TraceEvent.
const (
	COPY   TraceEvent = "COPY"
	CREATE TraceEvent = "CREATE"
	DELETE TraceEvent = "DELETE"
)

// HTTPValidationError defines model for HTTPValidationError.
type HTTPValidationError struct {
	Detail *[]ValidationError `json:"detail,omitempty"`
}

// Product A product is either a file itself, or a collection of files.
type Product struct {
	// Contents A dictionary of key-value pairs corresponding to path within product and the respective filehash. May be empty if the product is a single file.
	Contents *map[string]string `json:"contents,omitempty"`
	Hash     string             `json:"hash"`

	// Inputs A dictionary of key-value pairs corresponding to product name and the respective filehash. May be empty if the product has no inputs, or the inputs are not known.
	Inputs *map[string]string `json:"inputs,omitempty"`
	Name   string             `json:"name"`
	Size   int                `json:"size"`
}

// Signature The trace signature can be used to verify a products integrity.
//
// The signature is created using an asymetric, public-key encryption system.
// The bytes being signed corespond to the trace's product dictionary, in lower-case,
// compact JSON format (i.e. without whitespaces or linebreaks) and encoded in utf-8.
type Signature struct {
	Algorithm string `json:"algorithm"`
	PublicKey string `json:"public_key"`
	Signature string `json:"signature"`
}

// Trace A trace describes a specific event for a product at a specific origin.
type Trace struct {
	Event         TraceEvent `json:"event"`
	HashAlgorithm string     `json:"hash_algorithm"`
	Origin        string     `json:"origin"`
	Product       Product    `json:"product"`
	Signature     Signature  `json:"signature"`
	Timestamp     time.Time  `json:"timestamp"`
}

// TraceEvent A trace event describes how the trace comes into life.
//
// CREATE: A new product is generated.
// COPY: A product is copied from to a new location.
// DELETE: A product is removed from for a given reason.
type TraceEvent string

// TraceRegistration The results of a trace registration.
type TraceRegistration struct {
	Message string `json:"message"`
	Success bool   `json:"success"`
}

// TraceValidation The results of a trace validation
type TraceValidation struct {
	Message string `json:"message"`
	Success bool   `json:"success"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Loc  []ValidationError_Loc_Item `json:"loc"`
	Msg  string                     `json:"msg"`
	Type string                     `json:"type"`
}

// ValidationErrorLoc0 defines model for .
type ValidationErrorLoc0 = string

// ValidationErrorLoc1 defines model for .
type ValidationErrorLoc1 = int

// ValidationError_Loc_Item defines model for ValidationError.loc.Item.
type ValidationError_Loc_Item struct {
	union json.RawMessage
}

// PutTracesV1TracesPutJSONBody defines parameters for PutTracesV1TracesPut.
type PutTracesV1TracesPutJSONBody = []Trace

// SearchHashV1TracesHashHashGetParams defines parameters for SearchHashV1TracesHashHashGet.
type SearchHashV1TracesHashHashGetParams struct {
	Filehash    string  `form:"filehash" json:"filehash"`
	Productname *string `form:"productname,omitempty" json:"productname,omitempty"`
}

// ValidateProductV1TracesProductnameValidateGetParams defines parameters for ValidateProductV1TracesProductnameValidateGet.
type ValidateProductV1TracesProductnameValidateGetParams struct {
	Filehash string `form:"filehash" json:"filehash"`
}

// PutTracesV1TracesPutJSONRequestBody defines body for PutTracesV1TracesPut for application/json ContentType.
type PutTracesV1TracesPutJSONRequestBody = PutTracesV1TracesPutJSONBody

// AsValidationErrorLoc0 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc0
func (t ValidationError_Loc_Item) AsValidationErrorLoc0() (ValidationErrorLoc0, error) {
	var body ValidationErrorLoc0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc0 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) FromValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc0 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsValidationErrorLoc1 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc1
func (t ValidationError_Loc_Item) AsValidationErrorLoc1() (ValidationErrorLoc1, error) {
	var body ValidationErrorLoc1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc1 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) FromValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc1 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ValidationError_Loc_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationError_Loc_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PingStatusGet request
	PingStatusGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTracesV1TracesPut request with any body
	PutTracesV1TracesPutWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTracesV1TracesPut(ctx context.Context, body PutTracesV1TracesPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchHashV1TracesHashHashGet request
	SearchHashV1TracesHashHashGet(ctx context.Context, hash string, params *SearchHashV1TracesHashHashGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTraceV1TracesProductnameGet request
	GetTraceV1TracesProductnameGet(ctx context.Context, productname string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateProductV1TracesProductnameValidateGet request
	ValidateProductV1TracesProductnameValidateGet(ctx context.Context, productname string, params *ValidateProductV1TracesProductnameValidateGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PingStatusGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPingStatusGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTracesV1TracesPutWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTracesV1TracesPutRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTracesV1TracesPut(ctx context.Context, body PutTracesV1TracesPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTracesV1TracesPutRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchHashV1TracesHashHashGet(ctx context.Context, hash string, params *SearchHashV1TracesHashHashGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchHashV1TracesHashHashGetRequest(c.Server, hash, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTraceV1TracesProductnameGet(ctx context.Context, productname string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTraceV1TracesProductnameGetRequest(c.Server, productname)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateProductV1TracesProductnameValidateGet(ctx context.Context, productname string, params *ValidateProductV1TracesProductnameValidateGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateProductV1TracesProductnameValidateGetRequest(c.Server, productname, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPingStatusGetRequest generates requests for PingStatusGet
func NewPingStatusGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTracesV1TracesPutRequest calls the generic PutTracesV1TracesPut builder with application/json body
func NewPutTracesV1TracesPutRequest(server string, body PutTracesV1TracesPutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTracesV1TracesPutRequestWithBody(server, "application/json", bodyReader)
}

// NewPutTracesV1TracesPutRequestWithBody generates requests for PutTracesV1TracesPut with any type of body
func NewPutTracesV1TracesPutRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/traces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchHashV1TracesHashHashGetRequest generates requests for SearchHashV1TracesHashHashGet
func NewSearchHashV1TracesHashHashGetRequest(server string, hash string, params *SearchHashV1TracesHashHashGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hash", runtime.ParamLocationPath, hash)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/traces/hash/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filehash", runtime.ParamLocationQuery, params.Filehash); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Productname != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "productname", runtime.ParamLocationQuery, *params.Productname); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTraceV1TracesProductnameGetRequest generates requests for GetTraceV1TracesProductnameGet
func NewGetTraceV1TracesProductnameGetRequest(server string, productname string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "productname", runtime.ParamLocationPath, productname)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/traces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewValidateProductV1TracesProductnameValidateGetRequest generates requests for ValidateProductV1TracesProductnameValidateGet
func NewValidateProductV1TracesProductnameValidateGetRequest(server string, productname string, params *ValidateProductV1TracesProductnameValidateGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "productname", runtime.ParamLocationPath, productname)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/traces/%s/validate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filehash", runtime.ParamLocationQuery, params.Filehash); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PingStatusGet request
	PingStatusGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PingStatusGetResponse, error)

	// PutTracesV1TracesPut request with any body
	PutTracesV1TracesPutWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTracesV1TracesPutResponse, error)

	PutTracesV1TracesPutWithResponse(ctx context.Context, body PutTracesV1TracesPutJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTracesV1TracesPutResponse, error)

	// SearchHashV1TracesHashHashGet request
	SearchHashV1TracesHashHashGetWithResponse(ctx context.Context, hash string, params *SearchHashV1TracesHashHashGetParams, reqEditors ...RequestEditorFn) (*SearchHashV1TracesHashHashGetResponse, error)

	// GetTraceV1TracesProductnameGet request
	GetTraceV1TracesProductnameGetWithResponse(ctx context.Context, productname string, reqEditors ...RequestEditorFn) (*GetTraceV1TracesProductnameGetResponse, error)

	// ValidateProductV1TracesProductnameValidateGet request
	ValidateProductV1TracesProductnameValidateGetWithResponse(ctx context.Context, productname string, params *ValidateProductV1TracesProductnameValidateGetParams, reqEditors ...RequestEditorFn) (*ValidateProductV1TracesProductnameValidateGetResponse, error)
}

type PingStatusGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r PingStatusGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PingStatusGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTracesV1TracesPutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TraceRegistration
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r PutTracesV1TracesPutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTracesV1TracesPutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchHashV1TracesHashHashGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Trace
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r SearchHashV1TracesHashHashGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchHashV1TracesHashHashGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTraceV1TracesProductnameGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Trace
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetTraceV1TracesProductnameGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTraceV1TracesProductnameGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateProductV1TracesProductnameValidateGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TraceValidation
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ValidateProductV1TracesProductnameValidateGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateProductV1TracesProductnameValidateGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PingStatusGetWithResponse request returning *PingStatusGetResponse
func (c *ClientWithResponses) PingStatusGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PingStatusGetResponse, error) {
	rsp, err := c.PingStatusGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePingStatusGetResponse(rsp)
}

// PutTracesV1TracesPutWithBodyWithResponse request with arbitrary body returning *PutTracesV1TracesPutResponse
func (c *ClientWithResponses) PutTracesV1TracesPutWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTracesV1TracesPutResponse, error) {
	rsp, err := c.PutTracesV1TracesPutWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTracesV1TracesPutResponse(rsp)
}

func (c *ClientWithResponses) PutTracesV1TracesPutWithResponse(ctx context.Context, body PutTracesV1TracesPutJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTracesV1TracesPutResponse, error) {
	rsp, err := c.PutTracesV1TracesPut(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTracesV1TracesPutResponse(rsp)
}

// SearchHashV1TracesHashHashGetWithResponse request returning *SearchHashV1TracesHashHashGetResponse
func (c *ClientWithResponses) SearchHashV1TracesHashHashGetWithResponse(ctx context.Context, hash string, params *SearchHashV1TracesHashHashGetParams, reqEditors ...RequestEditorFn) (*SearchHashV1TracesHashHashGetResponse, error) {
	rsp, err := c.SearchHashV1TracesHashHashGet(ctx, hash, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchHashV1TracesHashHashGetResponse(rsp)
}

// GetTraceV1TracesProductnameGetWithResponse request returning *GetTraceV1TracesProductnameGetResponse
func (c *ClientWithResponses) GetTraceV1TracesProductnameGetWithResponse(ctx context.Context, productname string, reqEditors ...RequestEditorFn) (*GetTraceV1TracesProductnameGetResponse, error) {
	rsp, err := c.GetTraceV1TracesProductnameGet(ctx, productname, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTraceV1TracesProductnameGetResponse(rsp)
}

// ValidateProductV1TracesProductnameValidateGetWithResponse request returning *ValidateProductV1TracesProductnameValidateGetResponse
func (c *ClientWithResponses) ValidateProductV1TracesProductnameValidateGetWithResponse(ctx context.Context, productname string, params *ValidateProductV1TracesProductnameValidateGetParams, reqEditors ...RequestEditorFn) (*ValidateProductV1TracesProductnameValidateGetResponse, error) {
	rsp, err := c.ValidateProductV1TracesProductnameValidateGet(ctx, productname, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateProductV1TracesProductnameValidateGetResponse(rsp)
}

// ParsePingStatusGetResponse parses an HTTP response from a PingStatusGetWithResponse call
func ParsePingStatusGetResponse(rsp *http.Response) (*PingStatusGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PingStatusGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutTracesV1TracesPutResponse parses an HTTP response from a PutTracesV1TracesPutWithResponse call
func ParsePutTracesV1TracesPutResponse(rsp *http.Response) (*PutTracesV1TracesPutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTracesV1TracesPutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TraceRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseSearchHashV1TracesHashHashGetResponse parses an HTTP response from a SearchHashV1TracesHashHashGetWithResponse call
func ParseSearchHashV1TracesHashHashGetResponse(rsp *http.Response) (*SearchHashV1TracesHashHashGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchHashV1TracesHashHashGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Trace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetTraceV1TracesProductnameGetResponse parses an HTTP response from a GetTraceV1TracesProductnameGetWithResponse call
func ParseGetTraceV1TracesProductnameGetResponse(rsp *http.Response) (*GetTraceV1TracesProductnameGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTraceV1TracesProductnameGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Trace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseValidateProductV1TracesProductnameValidateGetResponse parses an HTTP response from a ValidateProductV1TracesProductnameValidateGetWithResponse call
func ParseValidateProductV1TracesProductnameValidateGetResponse(rsp *http.Response) (*ValidateProductV1TracesProductnameValidateGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateProductV1TracesProductnameValidateGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TraceValidation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
