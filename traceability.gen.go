// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package main

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for TraceEvent.
const (
	COPY     TraceEvent = "COPY"
	CREATE   TraceEvent = "CREATE"
	DELETE   TraceEvent = "DELETE"
	OBSOLETE TraceEvent = "OBSOLETE"
)

// Content A product's content contains the path and the filehash
type Content struct {
	Hash string `json:"hash"`
	Path string `json:"path"`
}

// HTTPValidationError defines model for HTTPValidationError.
type HTTPValidationError struct {
	Detail *[]ValidationError `json:"detail,omitempty"`
}

// Input The input product used to derive a product from.
type Input struct {
	Hash        string `json:"hash"`
	ProductName string `json:"product_name"`
}

// Product A product is either a file itself, or a collection of files.
type Product struct {
	Contents          *[]Content `json:"contents,omitempty"`
	CreationTimestamp time.Time  `json:"creation_timestamp"`
	Hash              string     `json:"hash"`
	Inputs            *[]Input   `json:"inputs,omitempty"`
	Name              string     `json:"name"`
	Size              int64      `json:"size"`
}

// RegisterTrace A trace describes a specific event for a product used for validate incoming traces.
type RegisterTrace struct {
	Event               TraceEvent `json:"event"`
	HashAlgorithm       string     `json:"hash_algorithm"`
	ObsolescenceMessage *string    `json:"obsolescence_message,omitempty"`
	Product             Product    `json:"product"`
	Signature           Signature  `json:"signature"`
}

// Signature The trace signature can be used to verify a products integrity.
//
// The signature is created using an asymetric, public-key encryption system.
// The bytes being signed corespond to the trace's product dictionary, in lower-case,
// compact JSON format (i.e. without whitespaces or linebreaks) and encoded in utf-8.
type Signature struct {
	Algorithm string `json:"algorithm"`
	Message   string `json:"message"`
	PublicKey string `json:"public_key"`
	Signature string `json:"signature"`
}

// Trace A trace describes a specific event for a product at a specific origin with primary id.
type Trace struct {
	Event               TraceEvent `json:"event"`
	HashAlgorithm       string     `json:"hash_algorithm"`
	Id                  string     `json:"id"`
	ObsolescenceMessage *string    `json:"obsolescence_message,omitempty"`
	Origin              string     `json:"origin"`
	Product             Product    `json:"product"`
	RegisterTimestamp   time.Time  `json:"register_timestamp"`
	Signature           Signature  `json:"signature"`
}

// TraceEvent A trace event describes how the trace comes into life.
//
// CREATE: A new product is generated.
// COPY: A product is copied from to a new location.
// DELETE: A product is removed from for a given reason.
// OBSOLETE: A product is not recommended for use.
type TraceEvent string

// TraceRegistration The results of a trace registration.
type TraceRegistration struct {
	Message string `json:"message"`
	Success bool   `json:"success"`
}

// TraceValidation The results of a trace validation
type TraceValidation struct {
	Message string `json:"message"`
	Success bool   `json:"success"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Loc  []ValidationError_Loc_Item `json:"loc"`
	Msg  string                     `json:"msg"`
	Type string                     `json:"type"`
}

// ValidationErrorLoc0 defines model for .
type ValidationErrorLoc0 = string

// ValidationErrorLoc1 defines model for .
type ValidationErrorLoc1 = int

// ValidationError_Loc_Item defines model for ValidationError.loc.Item.
type ValidationError_Loc_Item struct {
	union json.RawMessage
}

// PutTracesV1JSONBody defines parameters for PutTracesV1.
type PutTracesV1JSONBody = []RegisterTrace

// ValidateProductParams defines parameters for ValidateProduct.
type ValidateProductParams struct {
	Filehash string `form:"filehash" json:"filehash"`
}

// PutTracesV1JSONRequestBody defines body for PutTracesV1 for application/json ContentType.
type PutTracesV1JSONRequestBody = PutTracesV1JSONBody

// AsValidationErrorLoc0 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc0
func (t ValidationError_Loc_Item) AsValidationErrorLoc0() (ValidationErrorLoc0, error) {
	var body ValidationErrorLoc0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc0 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) FromValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc0 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsValidationErrorLoc1 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc1
func (t ValidationError_Loc_Item) AsValidationErrorLoc1() (ValidationErrorLoc1, error) {
	var body ValidationErrorLoc1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc1 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) FromValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc1 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ValidationError_Loc_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationError_Loc_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PingStatusGet request
	PingStatusGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTracesV1 request with any body
	PutTracesV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTracesV1(ctx context.Context, body PutTracesV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchHashV1 request
	SearchHashV1(ctx context.Context, hash string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTraceByProductNameV1 request
	GetTraceByProductNameV1(ctx context.Context, productname string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTraceByIdV1 request
	GetTraceByIdV1(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateProduct request
	ValidateProduct(ctx context.Context, productname string, params *ValidateProductParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PingStatusGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPingStatusGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTracesV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTracesV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTracesV1(ctx context.Context, body PutTracesV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTracesV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchHashV1(ctx context.Context, hash string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchHashV1Request(c.Server, hash)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTraceByProductNameV1(ctx context.Context, productname string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTraceByProductNameV1Request(c.Server, productname)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTraceByIdV1(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTraceByIdV1Request(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateProduct(ctx context.Context, productname string, params *ValidateProductParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateProductRequest(c.Server, productname, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPingStatusGetRequest generates requests for PingStatusGet
func NewPingStatusGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTracesV1Request calls the generic PutTracesV1 builder with application/json body
func NewPutTracesV1Request(server string, body PutTracesV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTracesV1RequestWithBody(server, "application/json", bodyReader)
}

// NewPutTracesV1RequestWithBody generates requests for PutTracesV1 with any type of body
func NewPutTracesV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/traces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchHashV1Request generates requests for SearchHashV1
func NewSearchHashV1Request(server string, hash string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hash", runtime.ParamLocationPath, hash)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/traces/hash/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTraceByProductNameV1Request generates requests for GetTraceByProductNameV1
func NewGetTraceByProductNameV1Request(server string, productname string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "productname", runtime.ParamLocationPath, productname)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/traces/name/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTraceByIdV1Request generates requests for GetTraceByIdV1
func NewGetTraceByIdV1Request(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/traces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewValidateProductRequest generates requests for ValidateProduct
func NewValidateProductRequest(server string, productname string, params *ValidateProductParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "productname", runtime.ParamLocationPath, productname)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/traces/%s/validate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filehash", runtime.ParamLocationQuery, params.Filehash); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PingStatusGet request
	PingStatusGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PingStatusGetResponse, error)

	// PutTracesV1 request with any body
	PutTracesV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTracesV1Response, error)

	PutTracesV1WithResponse(ctx context.Context, body PutTracesV1JSONRequestBody, reqEditors ...RequestEditorFn) (*PutTracesV1Response, error)

	// SearchHashV1 request
	SearchHashV1WithResponse(ctx context.Context, hash string, reqEditors ...RequestEditorFn) (*SearchHashV1Response, error)

	// GetTraceByProductNameV1 request
	GetTraceByProductNameV1WithResponse(ctx context.Context, productname string, reqEditors ...RequestEditorFn) (*GetTraceByProductNameV1Response, error)

	// GetTraceByIdV1 request
	GetTraceByIdV1WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTraceByIdV1Response, error)

	// ValidateProduct request
	ValidateProductWithResponse(ctx context.Context, productname string, params *ValidateProductParams, reqEditors ...RequestEditorFn) (*ValidateProductResponse, error)
}

type PingStatusGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r PingStatusGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PingStatusGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTracesV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TraceRegistration
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r PutTracesV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTracesV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchHashV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Trace
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r SearchHashV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchHashV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTraceByProductNameV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Trace
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetTraceByProductNameV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTraceByProductNameV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTraceByIdV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Trace
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetTraceByIdV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTraceByIdV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TraceValidation
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ValidateProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PingStatusGetWithResponse request returning *PingStatusGetResponse
func (c *ClientWithResponses) PingStatusGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PingStatusGetResponse, error) {
	rsp, err := c.PingStatusGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePingStatusGetResponse(rsp)
}

// PutTracesV1WithBodyWithResponse request with arbitrary body returning *PutTracesV1Response
func (c *ClientWithResponses) PutTracesV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTracesV1Response, error) {
	rsp, err := c.PutTracesV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTracesV1Response(rsp)
}

func (c *ClientWithResponses) PutTracesV1WithResponse(ctx context.Context, body PutTracesV1JSONRequestBody, reqEditors ...RequestEditorFn) (*PutTracesV1Response, error) {
	rsp, err := c.PutTracesV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTracesV1Response(rsp)
}

// SearchHashV1WithResponse request returning *SearchHashV1Response
func (c *ClientWithResponses) SearchHashV1WithResponse(ctx context.Context, hash string, reqEditors ...RequestEditorFn) (*SearchHashV1Response, error) {
	rsp, err := c.SearchHashV1(ctx, hash, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchHashV1Response(rsp)
}

// GetTraceByProductNameV1WithResponse request returning *GetTraceByProductNameV1Response
func (c *ClientWithResponses) GetTraceByProductNameV1WithResponse(ctx context.Context, productname string, reqEditors ...RequestEditorFn) (*GetTraceByProductNameV1Response, error) {
	rsp, err := c.GetTraceByProductNameV1(ctx, productname, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTraceByProductNameV1Response(rsp)
}

// GetTraceByIdV1WithResponse request returning *GetTraceByIdV1Response
func (c *ClientWithResponses) GetTraceByIdV1WithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTraceByIdV1Response, error) {
	rsp, err := c.GetTraceByIdV1(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTraceByIdV1Response(rsp)
}

// ValidateProductWithResponse request returning *ValidateProductResponse
func (c *ClientWithResponses) ValidateProductWithResponse(ctx context.Context, productname string, params *ValidateProductParams, reqEditors ...RequestEditorFn) (*ValidateProductResponse, error) {
	rsp, err := c.ValidateProduct(ctx, productname, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidateProductResponse(rsp)
}

// ParsePingStatusGetResponse parses an HTTP response from a PingStatusGetWithResponse call
func ParsePingStatusGetResponse(rsp *http.Response) (*PingStatusGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PingStatusGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutTracesV1Response parses an HTTP response from a PutTracesV1WithResponse call
func ParsePutTracesV1Response(rsp *http.Response) (*PutTracesV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTracesV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TraceRegistration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseSearchHashV1Response parses an HTTP response from a SearchHashV1WithResponse call
func ParseSearchHashV1Response(rsp *http.Response) (*SearchHashV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchHashV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Trace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetTraceByProductNameV1Response parses an HTTP response from a GetTraceByProductNameV1WithResponse call
func ParseGetTraceByProductNameV1Response(rsp *http.Response) (*GetTraceByProductNameV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTraceByProductNameV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Trace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetTraceByIdV1Response parses an HTTP response from a GetTraceByIdV1WithResponse call
func ParseGetTraceByIdV1Response(rsp *http.Response) (*GetTraceByIdV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTraceByIdV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Trace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseValidateProductResponse parses an HTTP response from a ValidateProductWithResponse call
func ParseValidateProductResponse(rsp *http.Response) (*ValidateProductResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TraceValidation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"x+Px+K8AAAD///5GUsJtKQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
